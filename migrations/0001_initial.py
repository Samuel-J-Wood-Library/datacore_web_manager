# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-13 04:05
from __future__ import unicode_literals

import datetime
import dc_management.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Access_Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('date_changed', models.DateField()),
                ('change_type', models.CharField(choices=[('AA', 'Add access'), ('RA', 'Remove access')], default='AA', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='AccessPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Audit_Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('audit_date', models.DateField()),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Data_Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('change_date', models.DateField()),
                ('direction', models.CharField(choices=[('IM', 'Import data'), ('EX', 'Export data')], default='EX', max_length=2)),
                ('file_description', models.TextField()),
                ('transfer_method', models.CharField(choices=[('TM', 'Transfer.med.cornell.edu'), ('PH', 'Physical media'), ('EM', 'Email'), ('SF', 'SFTP'), ('PM', 'PopMedNet')], default='TM', max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='DC_Administrator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('cwid', models.CharField(max_length=32)),
                ('first_name', models.CharField(max_length=32)),
                ('last_name', models.CharField(max_length=32)),
                ('role', models.CharField(max_length=32)),
                ('date_started', models.DateField()),
                ('date_finished', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='DC_User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('cwid', models.CharField(max_length=16)),
                ('first_name', models.CharField(max_length=32)),
                ('last_name', models.CharField(max_length=32)),
                ('affiliation', models.CharField(choices=[('WC', 'Weill Cornell Medicine'), ('NP', 'New York Presbyterian'), ('RU', 'Rockefeller University'), ('SK', 'Memorial Sloan Kettering'), ('CO', 'Columbia University'), ('OT', 'Other')], default='WC', max_length=2)),
                ('role', models.CharField(choices=[('FC', 'Faculty'), ('SN', 'Statistician'), ('AF', 'Affiliate'), ('RC', 'Research Coordinator'), ('ST', 'Student'), ('VO', 'Volunteer'), ('OT', 'Other')], default='FC', max_length=2)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EnvtSubtype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='External_Access_Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('date_connected', models.DateField()),
                ('date_disconnected', models.DateField()),
                ('setup_charge', models.BooleanField()),
                ('hosting_charge', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Governance_Doc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('doc_id', models.CharField(max_length=64)),
                ('date_issued', models.DateField()),
                ('expiry_date', models.DateField()),
                ('governance_type', models.CharField(choices=[('IR', 'IRB'), ('DU', 'DUA'), ('DC', 'Data Core User Agreement'), ('ON', 'Onboarding Form')], default='DC', max_length=2)),
                ('documentation', models.FileField(blank=True, null=True, upload_to=dc_management.models.project_directory_path)),
                ('comments', models.TextField(blank=True, null=True)),
                ('access_allowed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.AccessPermission')),
                ('defers_to_doc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.Governance_Doc')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('dc_prj_id', models.CharField(max_length=8)),
                ('title', models.CharField(max_length=256)),
                ('env_type', models.CharField(choices=[('TH', 'Thesis Project'), ('RE', 'Research Project'), ('CL', 'Classroom Project')], default='RE', max_length=2)),
                ('expected_completion', models.DateField()),
                ('status', models.CharField(choices=[('RU', 'Running'), ('CO', 'Completed'), ('SU', 'Suspended')], default='RU', max_length=2)),
                ('predata_date', models.DateField(blank=True, null=True)),
                ('postdata_date', models.DateField(blank=True, null=True)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('status', models.CharField(choices=[('ON', 'On'), ('OF', 'Off')], default='ON', max_length=2)),
                ('function', models.CharField(choices=[('PR', 'Production'), ('TE', 'Test')], default='PR', max_length=2)),
                ('machine_type', models.CharField(choices=[('VM', 'Virtual Machine (VM)'), ('VD', 'Virtual Desktop Infrastructure (VDI)')], default='VM', max_length=2)),
                ('vm_size', models.CharField(choices=[('SM', 'Small ()'), ('MD', 'Medium ()'), ('LG', 'Large ()'), ('XL', 'Extra Large ()')], default='SM', max_length=2)),
                ('backup', models.CharField(choices=[('EN', 'Encrypted'), ('UE', 'Unencrypted')], default='EN', max_length=2)),
                ('operating_sys', models.CharField(choices=[('M8', 'Microsoft Windows Server 2008 (64-bit)'), ('M2', 'Microsoft Windows Server 2012 (64-bit)'), ('R7', 'Red Hat Enterprise Linux 7 (64-bit)'), ('W7', 'Microsoft Windows 7 (64-bit)')], default='M2', max_length=2)),
                ('node', models.CharField(max_length=16)),
                ('name_address', models.CharField(max_length=32)),
                ('ip_address', models.GenericIPAddressField()),
                ('processor_num', models.IntegerField()),
                ('ram', models.IntegerField()),
                ('disk_storage', models.IntegerField()),
                ('other_storage', models.IntegerField()),
                ('connection_date', models.DateField(default=datetime.date.today)),
                ('dns_name', models.CharField(blank=True, max_length=32, null=True)),
                ('host', models.CharField(blank=True, max_length=32, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Server_Change_Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_date', models.DateField()),
                ('state_change', models.CharField(blank=True, choices=[('AS', 'Add storage'), ('RS', 'Remove storage')], max_length=2, null=True)),
                ('change_amount', models.IntegerField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SN_Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_id', models.CharField(max_length=11)),
                ('date_created', models.DateField(default=datetime.date.today)),
            ],
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('name', models.CharField(max_length=64)),
                ('vendor', models.CharField(max_length=64)),
                ('version', models.CharField(max_length=16)),
                ('purchase_details', models.TextField(blank=True, null=True)),
                ('cost_per_unit', models.FloatField()),
                ('unit', models.CharField(max_length=64)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Software_License_Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('user_assigned', models.BooleanField()),
                ('concurrent', models.BooleanField()),
                ('monitored', models.BooleanField()),
                ('sn_ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='Software_Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_date', models.DateField()),
                ('applied_to_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.Server')),
                ('applied_to_prj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.Project')),
                ('applied_to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.DC_User')),
                ('sn_ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='Software_Purchase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('date_purchased', models.DateField()),
                ('num_licenses_purchased', models.IntegerField()),
                ('expiration', models.DateField()),
                ('purpose', models.CharField(choices=[('MN', 'Maintenance/Renewal'), ('AD', 'Additional/Expanding')], default='MN', max_length=2)),
                ('cost', models.FloatField()),
                ('documentation', models.FileField(blank=True, null=True, upload_to='procurement/%Y/%m/%d/')),
                ('comments', models.TextField(blank=True, null=True)),
                ('sn_ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket')),
                ('software', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.Software')),
            ],
        ),
        migrations.CreateModel(
            name='Storage_Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_creation', models.DateField(auto_now_add=True)),
                ('record_update', models.DateField(auto_now=True)),
                ('date_changed', models.DateField()),
                ('storage_amount', models.IntegerField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.Project')),
                ('sn_ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket')),
            ],
        ),
        migrations.CreateModel(
            name='SubFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='project', max_length=16)),
            ],
        ),
        migrations.AddField(
            model_name='software',
            name='license_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.Software_License_Type'),
        ),
        migrations.AddField(
            model_name='software',
            name='sn_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='server_change_log',
            name='sn_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='server',
            name='sub_function',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SubFunction'),
        ),
        migrations.AddField(
            model_name='project',
            name='completion_ticket',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='completion_tickets', to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='project',
            name='env_subtype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.EnvtSubtype'),
        ),
        migrations.AddField(
            model_name='project',
            name='pi',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_pi', to='dc_management.DC_User'),
        ),
        migrations.AddField(
            model_name='project',
            name='postdata_ticket',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='postdata_tickets', to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='project',
            name='predata_ticket',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='predata_tickets', to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='project',
            name='sn_tickets',
            field=models.ManyToManyField(to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='project',
            name='software_installed',
            field=models.ManyToManyField(db_table='prj_soft_install_tbl', related_name='software_installed', to='dc_management.Software'),
        ),
        migrations.AddField(
            model_name='project',
            name='software_requested',
            field=models.ManyToManyField(db_table='prj_soft_request_tbl', related_name='software_requested', to='dc_management.Software'),
        ),
        migrations.AddField(
            model_name='project',
            name='users',
            field=models.ManyToManyField(to='dc_management.DC_User'),
        ),
        migrations.AddField(
            model_name='governance_doc',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.Project'),
        ),
        migrations.AddField(
            model_name='governance_doc',
            name='sn_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='governance_doc',
            name='users_permitted',
            field=models.ManyToManyField(to='dc_management.DC_User'),
        ),
        migrations.AddField(
            model_name='external_access_log',
            name='project_connected',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.Project'),
        ),
        migrations.AddField(
            model_name='external_access_log',
            name='sn_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='external_access_log',
            name='user_requesting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.DC_User'),
        ),
        migrations.AddField(
            model_name='dc_user',
            name='sn_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='dc_administrator',
            name='sn_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='data_log',
            name='authorized_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authorizing_administrator', to='dc_management.DC_Administrator'),
        ),
        migrations.AddField(
            model_name='data_log',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.Project'),
        ),
        migrations.AddField(
            model_name='data_log',
            name='request_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='request_ticket', to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='data_log',
            name='reviewed_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviewing_administrator', to='dc_management.DC_Administrator'),
        ),
        migrations.AddField(
            model_name='data_log',
            name='sn_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='data_log',
            name='transfer_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_ticket', to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='audit_log',
            name='dc_user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dc_management.DC_User'),
        ),
        migrations.AddField(
            model_name='audit_log',
            name='governance_docs',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dc_management.Governance_Doc'),
        ),
        migrations.AddField(
            model_name='audit_log',
            name='node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dc_management.Server'),
        ),
        migrations.AddField(
            model_name='audit_log',
            name='performec_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.DC_Administrator'),
        ),
        migrations.AddField(
            model_name='audit_log',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='dc_management.Project'),
        ),
        migrations.AddField(
            model_name='audit_log',
            name='sn_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket'),
        ),
        migrations.AddField(
            model_name='access_log',
            name='dc_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.DC_User'),
        ),
        migrations.AddField(
            model_name='access_log',
            name='sn_ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dc_management.SN_Ticket'),
        ),
    ]
